package com.example.Walkocity.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StationLogEntryRepository stationLogEntryRepository;
    @Autowired

    private UserAccountRepository userAccountRepository;
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserAccomplishmentRepository userAccomplishmentRepository;

    @Autowired
    private FriendshipRepository friendshipRepository;

    @Autowired
    private WalkEventRepository walkEventRepository;

    @Autowired
    private JoinedWalkRepository joinedWalkRepository;

/*    @PostMapping(path= "/add/station") // Map ONLY POST Requests
    public @ResponseBody String addNewStation(@RequestParam String longitude
            , @RequestParam String latitude) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Station station = new Station();
        station.setLongitude(Double.parseDouble(longitude));
        station.setLatitude(Double.parseDouble(latitude));
        stationRepository.save(station);
        return "Saved";
    }*/

    @PostMapping(path = "/add/useraccount") // Map ONLY POST Requests
    public @ResponseBody
    Optional<UserAccount> addNewUserAccount(@RequestParam String email, @RequestParam String password, @RequestParam String facebookId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        UserAccount userAccount = new UserAccount();
        userAccount.setEmail(email);
        userAccount.setPassword(password);
        userAccount.setStartDate(LocalDate.now());
        userAccount.setFacebookId(facebookId);
        userAccountRepository.save(userAccount);
        UserAccomplishment userAccomplishment = new UserAccomplishment();
        userAccomplishment.setId(userAccount.getId());
        userAccomplishmentRepository.save(userAccomplishment);
        return userAccountRepository.findById(userAccount.getId());
    }

    @PostMapping(path = "/add/user") // Map ONLY POST Requests
    public @ResponseBody
    Optional<User> addNewUserProfile(@RequestParam String id, @RequestParam String firstName, @RequestParam String lastName,
                                     @RequestParam String age, @RequestParam String genderIdentity, @RequestParam String genderSearch, @RequestParam String country, @RequestParam String languages, @RequestParam String photo, @RequestParam String interests, @RequestParam String about) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User user = new User();
        user.setId(Integer.parseInt(id));
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setAge(Integer.parseInt(age));
        user.setGenderIdentity(genderIdentity);
        user.setGenderSearch(genderSearch);
        user.setCountry(country);
        user.setLanguages(languages);
        user.setPhoto(photo);
        user.setInterests(interests);
        user.setAbout(about);
        userRepository.save(user);
        return userRepository.findById(Integer.parseInt(id));
    }

    @PostMapping(path = "/add/friend") // Map ONLY POST Requests
    public @ResponseBody
    void addFriend(@RequestParam String id, @RequestParam String friendId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Friendship friendship = new Friendship();
        friendship.setId(Integer.parseInt(id));
        friendship.setFriendId(Integer.parseInt(friendId));
        Friendship friendshipTwo = new Friendship();
        friendshipTwo.setId(Integer.parseInt(friendId));
        friendshipTwo.setFriendId(Integer.parseInt(id));
        friendshipRepository.save(friendship);
        friendshipRepository.save(friendshipTwo);
    }

    @PostMapping(path = "/add/walkEvent") // Map ONLY POST Requests
    public @ResponseBody
    void addWalkEvent(@RequestParam String eventName, @RequestParam String ownerId, @RequestParam String location, @RequestParam String dateTime, @RequestParam String slots, @RequestParam String gender, @RequestParam String language, @RequestParam String takenSlots) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        WalkEvent walkEvent = new WalkEvent();
        walkEvent.setEventName(eventName);
        walkEvent.setOwnerId(Integer.parseInt(ownerId));
        walkEvent.setLocation(location);
        walkEvent.setDateTime(Long.parseLong(dateTime));
        Integer slotsInt = Integer.parseInt(slots);
        Integer takenSlotsInt = Integer.parseInt(takenSlots);
        walkEvent.setSlots(slotsInt);
        walkEvent.setGender(gender);
        walkEvent.setLanguage(language);
        walkEvent.setTakenSlots(takenSlotsInt);
        walkEventRepository.save(walkEvent);
    }


    @PostMapping(path = "/add/joinedWalk") // Map ONLY POST Requests
    public @ResponseBody
    void addJoinedWalk(@RequestParam String walkEventId, @RequestParam String userId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        JoinedWalk joinedWalk = new JoinedWalk();
        joinedWalk.setUserId(Integer.parseInt(userId));
        joinedWalk.setWalkEventId(Integer.parseInt(walkEventId));
        joinedWalkRepository.save(joinedWalk);
    }

    @PostMapping(path = "/update/user") // Map ONLY POST Requests
    public @ResponseBody
    void updateUserProfile(@RequestParam String id, @RequestParam String firstName, @RequestParam String lastName,
                           @RequestParam String age, @RequestParam String genderIdentity, @RequestParam String genderSearch, @RequestParam String country, @RequestParam String languages, @RequestParam String photo, @RequestParam String interests, @RequestParam String about) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        for (User user : userRepository.findAll()) {
            if (user.getId().equals(Integer.parseInt(id))) {
                user.setFirstName(firstName);
                user.setLastName(lastName);
                user.setAge(Integer.parseInt(age));
                user.setGenderIdentity(genderIdentity);
                user.setGenderSearch(genderSearch);
                user.setCountry(country);
                user.setLanguages(languages);
                user.setPhoto(photo);
                user.setInterests(interests);
                user.setAbout(about);
                userRepository.save(user);
            }
        }
    }


    @PostMapping(path = "/collectStationUserId") // Map ONLY POST Requests
    public @ResponseBody
    HashMap<String, Integer> collectStationUserId(@RequestParam String id, @RequestParam String stationId,
                                                  @RequestParam String stationType) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        HashMap<String, Integer> returnHash = new HashMap<>();
        returnHash.put("stationAdded", 0); // station NOT added (yet)
        boolean stationTaken = false;
        for (UserAccomplishment userAccomplishment : userAccomplishmentRepository.findAll()) {
            if (userAccomplishment.getId().equals(Integer.parseInt(id))) {
                System.out.println("user id found " + id);
                for (StationLogEntry stationLogEntry : stationLogEntryRepository.findAll()) {
                    System.out.println("Sation log entry " + stationLogEntry.toString());
                    if (stationLogEntry.getUserId().equals(Integer.parseInt(id)) && stationLogEntry.getId().equals(stationId)) {
                        System.out.println("user and station id found " + id + " statid  " + stationId);
                        stationTaken = true; // cheater detected. tried to click the same station twice within 15 minutes
                    }
                }
                if (!stationTaken) {
                    StationLogEntry stationLogEntryLog = new StationLogEntry(stationId, new Date().getTime(), Integer.parseInt(id));
                    stationLogEntryRepository.save(stationLogEntryLog);
                    userAccomplishment.addPoints(stationType);
                    returnHash.put("stationAdded", 1); // station added
                    userAccomplishmentRepository.save(userAccomplishment);
                }
                // return all the data whether or not station was added
                returnHash.put("points", userAccomplishment.getPoints());
                returnHash.put("station_count", userAccomplishment.getStationCount());
                returnHash.put("toilet_count", userAccomplishment.getToiletCount());
                returnHash.put("trash_count", userAccomplishment.getTrashCount());
                returnHash.put("cafe_count", userAccomplishment.getCafeCount());

            }
        }
        return returnHash;
    }

    @DeleteMapping(path = "/remove/friend") // Map ONLY DELETE Requests
    public @ResponseBody
    void removeFriend(@RequestParam String id, @RequestParam String friendId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        for (Friendship friendship : friendshipRepository.findAll()) {
            if (friendship.getId().equals(Integer.parseInt(id)) && friendship.getFriendId().equals(Integer.parseInt(friendId))) {
                friendshipRepository.delete(friendship);
            } else if (friendship.getId().equals(Integer.parseInt(friendId)) && friendship.getFriendId().equals(Integer.parseInt(id))) {
                friendshipRepository.delete(friendship);
            }
        }
    }

    @DeleteMapping(path = "/remove/userAccount") // Map ONLY DELETE Requests
    public @ResponseBody
    void removeUserAccount(@RequestParam String id) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        for (UserAccount userAccount : userAccountRepository.findAll()) {
            if (userAccount.getId().equals(Integer.parseInt(id))) {
                userAccountRepository.delete(userAccount);
            }
        }
        for (User user : userRepository.findAll()) {
            if (user.getId().equals(Integer.parseInt(id))) {
                userRepository.delete(user);
            }
        }
        for (UserAccomplishment userAccomplishment : userAccomplishmentRepository.findAll()) {
            if (userAccomplishment.getId().equals(Integer.parseInt(id))) {
                userAccomplishmentRepository.delete(userAccomplishment);
            }
        }
        for (Friendship friendship : friendshipRepository.findAll()) {
            if (friendship.getId().equals(Integer.parseInt(id))) {
                friendshipRepository.delete(friendship);
            } else if (friendship.getFriendId().equals(Integer.parseInt(id))) {
                friendshipRepository.delete(friendship);
            }
        }
    }

    @DeleteMapping(path = "/remove/walkEvent") // Map ONLY DELETE Requests
    public @ResponseBody
    void removeWalkEvent(@RequestParam String walkEventId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        for (WalkEvent walkEvent : walkEventRepository.findAll()) {
            if (walkEvent.getId().equals(Integer.parseInt(walkEventId))) {
                walkEventRepository.delete(walkEvent);
            }
        }
        for (JoinedWalk joinedWalk : joinedWalkRepository.findAll()) {
            if (joinedWalk.getWalkEventId().equals(Integer.parseInt(walkEventId))) {
                joinedWalkRepository.delete(joinedWalk);
            }
        }
    }

    @DeleteMapping(path = "/remove/joinedWalk") // Map ONLY DELETE Requests
    public @ResponseBody
    void removeJoinedWalk(@RequestParam String walkEventId, @RequestParam String userId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        for (JoinedWalk joinedWalk : joinedWalkRepository.findAll()) {
            if (joinedWalk.getWalkEventId().equals(Integer.parseInt(walkEventId)) && joinedWalk.getUserId().equals(Integer.parseInt(userId))) {
                joinedWalkRepository.delete(joinedWalk);
            }
        }
    }

    @GetMapping(path = "/joinedWalks/byId")
    public @ResponseBody
    Iterable<WalkEvent> getJoinedWalksById(@RequestParam String userId) {
        ArrayList<WalkEvent> joinedWalks = new ArrayList<>();
        for (JoinedWalk joinedWalk : joinedWalkRepository.findAll()) {
            if (joinedWalk.getUserId().equals(Integer.parseInt(userId))) {
                for (WalkEvent walkEvent : walkEventRepository.findAll()) {
                    if (walkEvent.getId().equals(joinedWalk.getWalkEventId())) {
                        joinedWalks.add(walkEvent);
                    }
                }
            }
        } return joinedWalks;
    }

    @GetMapping(path = "/all/walkEvents")
    public @ResponseBody
    Iterable<WalkEvent> getAllWalkEvents() {
        // This returns a JSON or XML with the users
        return walkEventRepository.findAll();
    }


    @GetMapping(path = "/friends/byId")
    public @ResponseBody
    Iterable<User> getFriendsById(@RequestParam String id) {
        ArrayList<User> friends = new ArrayList<>();
        for (Friendship friendship : friendshipRepository.findAll()) {
            if (friendship.getId().equals(Integer.parseInt(id))) {
                Integer friendshipId = friendship.getFriendId();
                for (User user : userRepository.findAll()) {
                    if (user.getId().equals(friendshipId)) {
                        friends.add(user);
                    }
                }
            }
        }
        return friends;
    }


    @GetMapping(path = "/all/stations")
    public @ResponseBody
    Iterable<StationLogEntry> getAllStations() {
        // This returns a JSON or XML with the users
        return stationLogEntryRepository.findAll();
    }


    @GetMapping(path = "/all/useraccounts")
    public @ResponseBody
    Iterable<UserAccount> getAllUserAccounts() {
        // This returns a JSON or XML with the users
        return userAccountRepository.findAll();
    }


    @GetMapping(path = "/all/users")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


    @GetMapping(path = "/user/byId")
    public @ResponseBody
    User getUser(@RequestParam String id) {
        User user = new User();
        user.setId(-1);
        for (User u : userRepository.findAll()) {
            if (u.getId().equals(Integer.parseInt(id))) {
                user = u;
            }
        }
        return user;
    }

    @GetMapping(path = "/user/byName")
    public @ResponseBody
    Iterable<User> getUser(@RequestParam String firstName, @RequestParam String lastName) {
        ArrayList<User> users = new ArrayList<>();
        for (User u : userRepository.findAll()) {
            if (u.getFirstName().equals(firstName) && u.getLastName().equals(lastName)) {
                users.add(u);
            }
        }
        return users;
    }


    @GetMapping(path = "/useraccount/byEmail")
    public @ResponseBody
    UserAccount getUserAccount(@RequestParam String email) {
        UserAccount user = new UserAccount();
        user.setId(-1);
        for (UserAccount userAccount : userAccountRepository.findAll()) {
            if (userAccount.getEmail().equals(email)) {
                user.setId(userAccount.getId());
            }
        }
        return user;
    }

    @GetMapping(path = "/useraccount/byFacebookId")
    public @ResponseBody
    UserAccount getUserAccountByFacebook(@RequestParam String facebookId) {
        UserAccount user = new UserAccount();
        user.setId(-1);
        for (UserAccount userAccount : userAccountRepository.findAll()) {
            if (userAccount.getFacebookId() != null && userAccount.getFacebookId().equals(facebookId)) {
                user.setId(userAccount.getId());
            }
        }
        return user;
    }

    @GetMapping(path = "/login")
    public @ResponseBody
    UserAccount getUserAccount(@RequestParam String email, @RequestParam String password) {
        UserAccount user = new UserAccount();
        user.setId(-1);
        for (UserAccount userAccount : userAccountRepository.findAll()) {
            if (userAccount.getEmail().equals(email) && userAccount.getPassword().equals(password)) {
                user.setId(userAccount.getId());
            }
        }
        return user;
    }

    @GetMapping(path = "/getPointsForUserId")
    public @ResponseBody
    Integer getPointsForUserId(@RequestParam String id) {
        for (UserAccomplishment userAccomplishment : userAccomplishmentRepository.findAll()) {
            if (userAccomplishment.getId().equals(Integer.parseInt(id))) {
                return userAccomplishment.getPoints();
            }
        }
        return -1;
    }

    @GetMapping(path = "/getLevelForUserId")
    public @ResponseBody
    Integer getLevelForUserId(@RequestParam String id) {
        for (UserAccomplishment userAccomplishment : userAccomplishmentRepository.findAll()) {
            if (userAccomplishment.getId().equals(Integer.parseInt(id))) {

                Integer level = userAccomplishment.checkUserLevel();
                userAccomplishmentRepository.save(userAccomplishment);
                return level;
            }
        }
        return -1;
    }

    @GetMapping(path = "/getUserAccomplishmentById")
    public @ResponseBody
    HashMap<String, Integer> getUserAccomplishmentById(@RequestParam String id) {
        HashMap<String, Integer> returnHash = new HashMap<>();

        for (UserAccomplishment userAccomplishment : userAccomplishmentRepository.findAll()) {
            if (userAccomplishment.getId().equals(Integer.parseInt(id))) {
                returnHash.put("points", userAccomplishment.getPoints());
                returnHash.put("station_count", userAccomplishment.getStationCount());
                returnHash.put("toilet_count", userAccomplishment.getToiletCount());
                returnHash.put("trash_count", userAccomplishment.getTrashCount());
                returnHash.put("cafe_count", userAccomplishment.getCafeCount());
                return returnHash;
            }
        }
        returnHash.put("points", -1); // no user found
        return returnHash;
    }


}